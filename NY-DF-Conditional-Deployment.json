{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "factoryName": {
            "type": "string",
            "defaultValue": "nydatafactory",
            "metadata": {
                "description": "Enter the worldwide unique name for Data Factory"
                }
        },
        "storageAccountName": {
            "type": "string",
            "defaultValue": "storageacc",
            "metadata": {
            "description": "Enter the unique Name of the Azure storage account that contains the input/output data."
            }
       },
       "location": {
            "type": "string",
            "defaultValue": "eastus",
            "metadata": {
            "description": "By Default eastus location is allowed"
            }
        },
        "Action_Group_Name": {
            "defaultValue": "actiongroup",
            "type": "String",
            "metadata": {
                "description": "Enter Action group name"
                }
        },
        "Action_Email": {
            "defaultValue": "Ahmad.asad@emumba.com",
            "type": "String",
            "metadata": {
                "description": "Enter Email to send the notification."
                }
        },
        "Teams_connections_name": {
            "defaultValue": "teams-1",
            "type": "String",
            "metadata": {
                "description": "Enter Teams Connection Name e.g teams-1"
                }
        },
        "Logic_App_Name": {
            "defaultValue": "newlogicapp",
            "type": "String",
            "metadata": {
                "description": "Enter Logic App name"
                }
        },
        "Save_into_SQL":{
            "type": "string",
            "allowedValues":[
                "Yes",
                "No"
            ]
        },
        "yourserver": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "Enter Logic App name"
                }
        },
        "yourdb": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "Enter Logic App name"
                }
        },
        "serverlogin": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "Enter Logic App name"
                }
        },
        "serverpassword": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "Enter Logic App name"
                }
        }          
    },
    "variables": {
        "factoryId": "[resourceId('Microsoft.DataFactory/factories', parameters('factoryName'))]",
        "storageAccountId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"        
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-06-01",
            "name": "[parameters('storageAccountName')]",
            "location": "[parameters('location')]",
            "sku": {
                 "name": "Standard_LRS"
                },
            "kind": "StorageV2",
            "properties": {}
       },

       {
            "type": "Microsoft.DataFactory/factories",
            "apiVersion": "2018-06-01",
            "name": "[parameters('factoryName')]",
            "location": "[parameters('location')]",
            "properties": {
            },
            "identity": {
                "type": "SystemAssigned"
                },
            "dependsOn": [
                "[parameters('storageAccountName')]"
            ]
        },

        {
            "condition":"[equals(parameters('Save_into_SQL'),'Yes')]",
            "type": "Microsoft.Sql/servers",
            "apiVersion": "2020-02-02-preview",
            "name": "[parameters('yourserver')]",
            "location": "[parameters('location')]",
            "properties": {
                            "administratorLogin": "[parameters('serverlogin')]",
                            "administratorLoginPassword": "[parameters('serverpassword')]"
            },
            "resources": [
            {
                "condition":"[equals(parameters('Save_into_SQL'),'Yes')]",
                "type": "databases",
                "apiVersion": "2020-08-01-preview",
                "name": "[parameters('yourdb')]",
                "location": "[parameters('location')]",
                "sku": {
                            "name": "Basic",
                            "tier": "Basic",
                            "capacity": 5
                },
                "dependsOn": [
                    "[resourceId('Microsoft.Sql/servers', concat(parameters('yourserver')))]"
                ]
            }
          ]
        },
        {
            "condition":"[equals(parameters('Save_into_SQL'),'Yes')]",
            "type": "Microsoft.Sql/servers/firewallRules",
            "apiVersion": "2015-05-01-preview",
            "name": "[concat(parameters('yourserver'), '/AllowAllWindowsAzureIps')]",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', concat(parameters('yourserver')))]"
            ],
            "properties": {
                "startIpAddress": "0.0.0.0",
                "endIpAddress": "0.0.0.0"
            }
        },
        {
            "condition":"[equals(parameters('Save_into_SQL'),'No')]",
            "name": "[concat(parameters('factoryName'), '/Covid_Tracking')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ToRawPartition",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 3,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "HttpReadSettings",
                                    "requestMethod": "GET"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "DelimitedTextSink",
                                "storeSettings": {
                                    "type": "AzureBlobStorageWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextWriteSettings",
                                    "quoteAllText": true,
                                    "fileExtension": ".txt"
                                }
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "Github_dataset",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "csv_dataset1",
                                "type": "DatasetReference",
                                "parameters": {
                                    "directory": {
                                        "value": "@concat(pipeline().parameters.rawBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
                                        "type": "Expression"
                                    },
                                    "file": {
                                        "value": "@concat(pipeline().parameters.sourceFilename,'_',pipeline().RunId,'.csv')",
                                        "type": "Expression"
                                    },
                                    "container": {
                                        "value": "@pipeline().parameters.blobContainer",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "ToRawOverwrite",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 3,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "HttpReadSettings",
                                    "requestMethod": "GET"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "DelimitedTextSink",
                                "storeSettings": {
                                    "type": "AzureBlobStorageWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextWriteSettings",
                                    "quoteAllText": true,
                                    "fileExtension": ".txt"
                                }
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "Github_dataset",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "csv_dataset1",
                                "type": "DatasetReference",
                                "parameters": {
                                    "directory": {
                                        "value": "@concat(pipeline().parameters.rawBlobDirectory, '/latest')",
                                        "type": "Expression"
                                    },
                                    "file": {
                                        "value": "@pipeline().parameters.sourceFilename",
                                        "type": "Expression"
                                    },
                                    "container": {
                                        "value": "@pipeline().parameters.blobContainer",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "CovidTracking_Dataset",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [
                            {
                                "activity": "MoreColumnnsInCurrentSchema",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            },
                            {
                                "activity": "LessColumnnsInCurrentSchema",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            },
                            {
                                "activity": "SameColumnsButDifferentArangements",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 3,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "CovidTracking_Dataset",
                                "type": "DataFlowReference",
                                "parameters": {
                                    "filename": "'covid_tracking'",
                                    "runid": {
                                        "value": "'@{pipeline().RunId}'",
                                        "type": "Expression"
                                    }
                                },
                                "datasetParameters": {
                                    "sourceCSV": {
                                        "directory": {
                                            "value": "@concat(pipeline().parameters.rawBlobDirectory, '/latest')",
                                            "type": "Expression"
                                        },
                                        "file": {
                                            "value": "@pipeline().parameters.sourceFilename",
                                            "type": "Expression"
                                        },
                                        "container": {
                                            "value": "@pipeline().parameters.blobContainer",
                                            "type": "Expression"
                                        }
                                    },
                                    "sinkParquet": {
                                        "container": {
                                            "value": "@pipeline().parameters.blobContainer",
                                            "type": "Expression"
                                        },
                                        "directory": {
                                            "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
                                            "type": "Expression"
                                        },
                                        "file": "specified in data flow"
                                    },
                                    "sinkLatestParquet": {
                                        "container": {
                                            "value": "@pipeline().parameters.blobContainer",
                                            "type": "Expression"
                                        },
                                        "directory": {
                                            "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
                                            "type": "Expression"
                                        },
                                        "file": "specified in data flow"
                                    },
                                    "sinkJsonl": {
                                        "container": {
                                            "value": "@pipeline().parameters.blobContainer",
                                            "type": "Expression"
                                        },
                                        "directory": {
                                            "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
                                            "type": "Expression"
                                        },
                                        "file": "specified in data flow"
                                    },
                                    "SinkCSV": {
                                        "directory": {
                                            "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
                                            "type": "Expression"
                                        },
                                        "file": "specified in data flow",
                                        "container": {
                                            "value": "@pipeline().parameters.blobContainer",
                                            "type": "Expression"
                                        }
                                    },
                                    "sinkLatestJsonl": {
                                        "container": {
                                            "value": "@pipeline().parameters.blobContainer",
                                            "type": "Expression"
                                        },
                                        "directory": {
                                            "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
                                            "type": "Expression"
                                        },
                                        "file": {
                                            "value": "@concat(pipeline().parameters.filename,'.jsonl')",
                                            "type": "Expression"
                                        }
                                    },
                                    "SinkLatestCSV": {
                                        "directory": {
                                            "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
                                            "type": "Expression"
                                        },
                                        "file": {
                                            "value": "@concat(pipeline().parameters.filename,'.csv')",
                                            "type": "Expression"
                                        },
                                        "container": {
                                            "value": "@pipeline().parameters.blobContainer",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    },
                    {
                        "name": "JSONLtoJSONLATEST",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "CovidTracking_Dataset",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 3,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "JsonSource",
                                "storeSettings": {
                                    "type": "AzureBlobStorageReadSettings",
                                    "recursive": true
                                },
                                "formatSettings": {
                                    "type": "JsonReadSettings"
                                }
                            },
                            "sink": {
                                "type": "JsonSink",
                                "storeSettings": {
                                    "type": "AzureBlobStorageWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "JsonWriteSettings",
                                    "filePattern": "arrayOfObjects"
                                }
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "json_dataset1",
                                "type": "DatasetReference",
                                "parameters": {
                                    "container": {
                                        "value": "@pipeline().parameters.blobContainer",
                                        "type": "Expression"
                                    },
                                    "directory": {
                                        "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
                                        "type": "Expression"
                                    },
                                    "file": {
                                        "value": "@concat(pipeline().parameters.filename,'.jsonl')",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "json_dataset1",
                                "type": "DatasetReference",
                                "parameters": {
                                    "container": {
                                        "value": "@pipeline().parameters.blobContainer",
                                        "type": "Expression"
                                    },
                                    "directory": {
                                        "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
                                        "type": "Expression"
                                    },
                                    "file": {
                                        "value": "@concat(pipeline().parameters.filename,'.json')",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "JSONLtoJSON",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "CovidTracking_Dataset",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 3,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "JsonSource",
                                "storeSettings": {
                                    "type": "AzureBlobStorageReadSettings",
                                    "recursive": true
                                },
                                "formatSettings": {
                                    "type": "JsonReadSettings"
                                }
                            },
                            "sink": {
                                "type": "JsonSink",
                                "storeSettings": {
                                    "type": "AzureBlobStorageWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "JsonWriteSettings",
                                    "filePattern": "arrayOfObjects"
                                }
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "json_dataset1",
                                "type": "DatasetReference",
                                "parameters": {
                                    "container": {
                                        "value": "@pipeline().parameters.blobContainer",
                                        "type": "Expression"
                                    },
                                    "directory": {
                                        "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
                                        "type": "Expression"
                                    },
                                    "file": {
                                        "value": "@concat(pipeline().parameters.filename,'.jsonl')",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "json_dataset1",
                                "type": "DatasetReference",
                                "parameters": {
                                    "container": {
                                        "value": "@pipeline().parameters.blobContainer",
                                        "type": "Expression"
                                    },
                                    "directory": {
                                        "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
                                        "type": "Expression"
                                    },
                                    "file": {
                                        "value": "@concat(pipeline().parameters.filename,'_',pipeline().RunId,'.json')",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "MetaDataCurrentCSVFile",
                        "description": "This metadata activity will gets the csv file data of new incoming csv file data. ",
                        "type": "GetMetadata",
                        "dependsOn": [
                            {
                                "activity": "ToRawPartition",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "ToRawOverwrite",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "GetCurrentCSVFile",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "fieldList": [
                                "columnCount",
                                "structure"
                            ],
                            "storeSettings": {
                                "type": "AzureBlobStorageReadSettings",
                                "recursive": true
                            },
                            "formatSettings": {
                                "type": "DelimitedTextReadSettings"
                            }
                        }
                    },
                    {
                        "name": "MetaDataLastCSVFile",
                        "type": "GetMetadata",
                        "dependsOn": [
                            {
                                "activity": "ToRawOverwrite",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "ToRawPartition",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "SaveCurrentSchemaDataset",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "fieldList": [
                                "columnCount",
                                "structure"
                            ],
                            "storeSettings": {
                                "type": "AzureBlobStorageReadSettings",
                                "recursive": true
                            },
                            "formatSettings": {
                                "type": "DelimitedTextReadSettings"
                            }
                        }
                    },
                    {
                        "name": "MoreColumnnsInCurrentSchema",
                        "description": "We will compare the incoming values from 2 metadata activities (CurrentCSV, LastSavedCSV)",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "MetaDataCurrentCSVFile",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            },
                            {
                                "activity": "MetaDataLastCSVFile",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@greater(activity('MetaDataCurrentCSVFile').output.columnCount,activity('MetaDataLastCSVFile').output.columnCount)",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Wait-FalseMoreColumns",
                                    "description": "This is false activty in More Columns condition.",
                                    "type": "Wait",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "waitTimeInSeconds": 1
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "Alert_Schema_Has_More_Columns",
                                    "description": "This is a wait activity and we shall set alerts on it.",
                                    "type": "Wait",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "waitTimeInSeconds": 1
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "LessColumnnsInCurrentSchema",
                        "description": "We will compare the incoming values from 2 metadata activities (CurrentCSV, LastSavedCSV)",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "MetaDataCurrentCSVFile",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            },
                            {
                                "activity": "MetaDataLastCSVFile",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@greater(activity('MetaDataLastCSVFile').output.columnCount,activity('MetaDataCurrentCSVFile').output.columnCount)",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Wait-FalseSchemaHasLessColumns",
                                    "description": "This is false Activity in Schema has less columns activity.",
                                    "type": "Wait",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "waitTimeInSeconds": 1
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "Alert_Schema_Has_Less_Columns",
                                    "description": "This is wait activity ans we shall setup alert on it.",
                                    "type": "Wait",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "waitTimeInSeconds": 1
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "SameColumnsButDifferentArangements",
                        "description": "We will compare the incoming values from 2 metadata activities (CurrentCSV, LastSavedCSV) to check the same columns but different schema.",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "MetaDataCurrentCSVFile",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            },
                            {
                                "activity": "MetaDataLastCSVFile",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@and(equals(activity('MetaDataCurrentCSVFile').output.columnCount,activity('MetaDataLastCSVFile').output.columnCount),not(equals(activity('MetaDataCurrentCSVFile').output.structure,activity('MetaDataLastCSVFile').output.structure)))",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Wait-FalseSameColumns",
                                    "description": "False Activity for Same Columns but different Schema.",
                                    "type": "Wait",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "waitTimeInSeconds": 1
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "Alert_Schema_Has_Same_Column_But_Different_Structure",
                                    "description": "This is alert activity when columns are same but different structure.",
                                    "type": "Wait",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "waitTimeInSeconds": 1
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "GetLastSchema",
                        "description": "This will get the lastly saved schema.",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "MoreColumnnsInCurrentSchema",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            },
                            {
                                "activity": "LessColumnnsInCurrentSchema",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            },
                            {
                                "activity": "SameColumnsButDifferentArangements",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobStorageReadSettings",
                                    "recursive": true
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "DelimitedTextSink",
                                "storeSettings": {
                                    "type": "AzureBlobStorageWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextWriteSettings",
                                    "quoteAllText": true,
                                    "fileExtension": ".txt"
                                }
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "SaveCurrentSchemaDataset",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "GetLastSchemaDataset",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ]
                    },
                    {
                        "name": "SaveCurrentSchema",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "GetLastSchema",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobStorageReadSettings",
                                    "recursive": true
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "DelimitedTextSink",
                                "storeSettings": {
                                    "type": "AzureBlobStorageWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextWriteSettings",
                                    "quoteAllText": true,
                                    "fileExtension": ".txt"
                                }
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "GetCurrentCSVFile",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "SaveCurrentSchemaDataset",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ]
                    }
                ],
                "parameters": {
                    "sourceFilename": {
                        "type": "string",
                        "defaultValue": "states_daily_4pm_et.csv"
                    },
                    "blobContainer": {
                        "type": "string",
                        "defaultValue": "public"
                    },
                    "rawBlobDirectory": {
                        "type": "string",
                        "defaultValue": "raw/covid-19/covid_tracking"
                    },
                    "curatedBlobDirectory": {
                        "type": "string",
                        "defaultValue": "curated/covid-19/covid_tracking"
                    },
                    "filename": {
                        "type": "string",
                        "defaultValue": "covid_tracking"
                    }
                },
                "folder": {
                    "name": "Case Data"
                },
                "annotations": [],
                "lastPublishTime": "2020-12-02T14:46:16Z"
            },
            "dependsOn": [
                "[parameters('factoryName')]",
                "[concat(variables('factoryId'), '/datasets/Github_dataset')]",
                "[concat(variables('factoryId'), '/datasets/csv_dataset1')]",
                "[concat(variables('factoryId'), '/dataflows/CovidTracking_Dataset')]",
                "[concat(variables('factoryId'), '/datasets/json_dataset1')]"
            ]
        },
        {
            "condition":"[equals(parameters('Save_into_SQL'),'Yes')]",
            "name": "[concat(parameters('factoryName'), '/Covid_Tracking_SinkSQL')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ToRawPartition",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 3,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "HttpReadSettings",
                                    "requestMethod": "GET"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "DelimitedTextSink",
                                "storeSettings": {
                                    "type": "AzureBlobStorageWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextWriteSettings",
                                    "quoteAllText": true,
                                    "fileExtension": ".txt"
                                }
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "Github_dataset",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "csv_dataset1",
                                "type": "DatasetReference",
                                "parameters": {
                                    "directory": {
                                        "value": "@concat(pipeline().parameters.rawBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
                                        "type": "Expression"
                                    },
                                    "file": {
                                        "value": "@concat(pipeline().parameters.sourceFilename,'_',pipeline().RunId,'.csv')",
                                        "type": "Expression"
                                    },
                                    "container": {
                                        "value": "@pipeline().parameters.blobContainer",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "ToRawOverwrite",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 3,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "HttpReadSettings",
                                    "requestMethod": "GET"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "DelimitedTextSink",
                                "storeSettings": {
                                    "type": "AzureBlobStorageWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextWriteSettings",
                                    "quoteAllText": true,
                                    "fileExtension": ".txt"
                                }
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "Github_dataset",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "csv_dataset1",
                                "type": "DatasetReference",
                                "parameters": {
                                    "directory": {
                                        "value": "@concat(pipeline().parameters.rawBlobDirectory, '/latest')",
                                        "type": "Expression"
                                    },
                                    "file": {
                                        "value": "@pipeline().parameters.sourceFilename",
                                        "type": "Expression"
                                    },
                                    "container": {
                                        "value": "@pipeline().parameters.blobContainer",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "JSONLtoJSONLATEST",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "CovidTracking_Dataset",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 3,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "JsonSource",
                                "storeSettings": {
                                    "type": "AzureBlobStorageReadSettings",
                                    "recursive": true
                                },
                                "formatSettings": {
                                    "type": "JsonReadSettings"
                                }
                            },
                            "sink": {
                                "type": "JsonSink",
                                "storeSettings": {
                                    "type": "AzureBlobStorageWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "JsonWriteSettings",
                                    "filePattern": "arrayOfObjects"
                                }
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "json_dataset1",
                                "type": "DatasetReference",
                                "parameters": {
                                    "container": {
                                        "value": "@pipeline().parameters.blobContainer",
                                        "type": "Expression"
                                    },
                                    "directory": {
                                        "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
                                        "type": "Expression"
                                    },
                                    "file": {
                                        "value": "@concat(pipeline().parameters.filename,'.jsonl')",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "json_dataset1",
                                "type": "DatasetReference",
                                "parameters": {
                                    "container": {
                                        "value": "@pipeline().parameters.blobContainer",
                                        "type": "Expression"
                                    },
                                    "directory": {
                                        "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
                                        "type": "Expression"
                                    },
                                    "file": {
                                        "value": "@concat(pipeline().parameters.filename,'.json')",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "JSONLtoJSON",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "CovidTracking_Dataset",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 3,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "JsonSource",
                                "storeSettings": {
                                    "type": "AzureBlobStorageReadSettings",
                                    "recursive": true
                                },
                                "formatSettings": {
                                    "type": "JsonReadSettings"
                                }
                            },
                            "sink": {
                                "type": "JsonSink",
                                "storeSettings": {
                                    "type": "AzureBlobStorageWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "JsonWriteSettings",
                                    "filePattern": "arrayOfObjects"
                                }
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "json_dataset1",
                                "type": "DatasetReference",
                                "parameters": {
                                    "container": {
                                        "value": "@pipeline().parameters.blobContainer",
                                        "type": "Expression"
                                    },
                                    "directory": {
                                        "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
                                        "type": "Expression"
                                    },
                                    "file": {
                                        "value": "@concat(pipeline().parameters.filename,'.jsonl')",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "json_dataset1",
                                "type": "DatasetReference",
                                "parameters": {
                                    "container": {
                                        "value": "@pipeline().parameters.blobContainer",
                                        "type": "Expression"
                                    },
                                    "directory": {
                                        "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
                                        "type": "Expression"
                                    },
                                    "file": {
                                        "value": "@concat(pipeline().parameters.filename,'_',pipeline().RunId,'.json')",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "MetaDataCurrentCSVFile",
                        "description": "This metadata activity will gets the csv file data of new incoming csv file data. ",
                        "type": "GetMetadata",
                        "dependsOn": [
                            {
                                "activity": "ToRawPartition",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "ToRawOverwrite",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "GetCurrentCSVFile",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "fieldList": [
                                "columnCount",
                                "structure"
                            ],
                            "storeSettings": {
                                "type": "AzureBlobStorageReadSettings",
                                "recursive": true
                            },
                            "formatSettings": {
                                "type": "DelimitedTextReadSettings"
                            }
                        }
                    },
                    {
                        "name": "MetaDataLastCSVFile",
                        "type": "GetMetadata",
                        "dependsOn": [
                            {
                                "activity": "ToRawOverwrite",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            },
                            {
                                "activity": "ToRawPartition",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "SaveCurrentSchemaDataset",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "fieldList": [
                                "columnCount",
                                "structure"
                            ],
                            "storeSettings": {
                                "type": "AzureBlobStorageReadSettings",
                                "recursive": true
                            },
                            "formatSettings": {
                                "type": "DelimitedTextReadSettings"
                            }
                        }
                    },
                    {
                        "name": "MoreColumnnsInCurrentSchema",
                        "description": "We will compare the incoming values from 2 metadata activities (CurrentCSV, LastSavedCSV)",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "MetaDataCurrentCSVFile",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            },
                            {
                                "activity": "MetaDataLastCSVFile",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@greater(activity('MetaDataCurrentCSVFile').output.columnCount,activity('MetaDataLastCSVFile').output.columnCount)",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Wait-FalseMoreColumns",
                                    "description": "This is false activty in More Columns condition.",
                                    "type": "Wait",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "waitTimeInSeconds": 1
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "Alert_Schema_Has_More_Columns",
                                    "description": "This is a wait activity and we shall set alerts on it.",
                                    "type": "Wait",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "waitTimeInSeconds": 1
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "LessColumnnsInCurrentSchema",
                        "description": "We will compare the incoming values from 2 metadata activities (CurrentCSV, LastSavedCSV)",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "MetaDataCurrentCSVFile",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            },
                            {
                                "activity": "MetaDataLastCSVFile",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@greater(activity('MetaDataLastCSVFile').output.columnCount,activity('MetaDataCurrentCSVFile').output.columnCount)",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Wait-FalseSchemaHasLessColumns",
                                    "description": "This is false Activity in Schema has less columns activity.",
                                    "type": "Wait",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "waitTimeInSeconds": 1
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "Alert_Schema_Has_Less_Columns",
                                    "description": "This is wait activity ans we shall setup alert on it.",
                                    "type": "Wait",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "waitTimeInSeconds": 1
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "SameColumnsButDifferentArangements",
                        "description": "We will compare the incoming values from 2 metadata activities (CurrentCSV, LastSavedCSV) to check the same columns but different schema.",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "MetaDataCurrentCSVFile",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            },
                            {
                                "activity": "MetaDataLastCSVFile",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@and(equals(activity('MetaDataCurrentCSVFile').output.columnCount,activity('MetaDataLastCSVFile').output.columnCount),not(equals(activity('MetaDataCurrentCSVFile').output.structure,activity('MetaDataLastCSVFile').output.structure)))",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Wait-FalseSameColumns",
                                    "description": "False Activity for Same Columns but different Schema.",
                                    "type": "Wait",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "waitTimeInSeconds": 1
                                    }
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "Alert_Schema_Has_Same_Column_But_Different_Structure",
                                    "description": "This is alert activity when columns are same but different structure.",
                                    "type": "Wait",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "waitTimeInSeconds": 1
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "GetLastSchema",
                        "description": "This will get the lastly saved schema.",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "MoreColumnnsInCurrentSchema",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            },
                            {
                                "activity": "LessColumnnsInCurrentSchema",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            },
                            {
                                "activity": "SameColumnsButDifferentArangements",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobStorageReadSettings",
                                    "recursive": true
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "DelimitedTextSink",
                                "storeSettings": {
                                    "type": "AzureBlobStorageWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextWriteSettings",
                                    "quoteAllText": true,
                                    "fileExtension": ".txt"
                                }
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "SaveCurrentSchemaDataset",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "GetLastSchemaDataset",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ]
                    },
                    {
                        "name": "SaveCurrentSchema",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "GetLastSchema",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobStorageReadSettings",
                                    "recursive": true
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "DelimitedTextSink",
                                "storeSettings": {
                                    "type": "AzureBlobStorageWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextWriteSettings",
                                    "quoteAllText": true,
                                    "fileExtension": ".txt"
                                }
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "GetCurrentCSVFile",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "SaveCurrentSchemaDataset",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ]
                    },
                    {
                        "name": "CovidTracking_Dataset",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [
                            {
                                "activity": "MoreColumnnsInCurrentSchema",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            },
                            {
                                "activity": "LessColumnnsInCurrentSchema",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            },
                            {
                                "activity": "SameColumnsButDifferentArangements",
                                "dependencyConditions": [
                                    "Completed"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "7.00:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "CovidTracking_Dataset_SinkSQL",
                                "type": "DataFlowReference",
                                "parameters": {
                                    "filename": "'covid_tracking'",
                                    "runid": "'runtime_guid'"
                                },
                                "datasetParameters": {
                                    "sourceCSV": {
                                        "directory": {
                                            "value": "@concat(pipeline().parameters.rawBlobDirectory, '/latest')",
                                            "type": "Expression"
                                        },
                                        "file": {
                                            "value": "@pipeline().parameters.sourceFilename",
                                            "type": "Expression"
                                        },
                                        "container": {
                                            "value": "@pipeline().parameters.blobContainer",
                                            "type": "Expression"
                                        }
                                    },
                                    "sinkParquet": {
                                        "container": {
                                            "value": "@pipeline().parameters.blobContainer",
                                            "type": "Expression"
                                        },
                                        "directory": {
                                            "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
                                            "type": "Expression"
                                        },
                                        "file": "abc"
                                    },
                                    "sinkLatestParquet": {
                                        "container": {
                                            "value": "@pipeline().parameters.blobContainer",
                                            "type": "Expression"
                                        },
                                        "directory": {
                                            "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
                                            "type": "Expression"
                                        },
                                        "file": "abc"
                                    },
                                    "sinkJsonl": {
                                        "container": {
                                            "value": "@pipeline().parameters.blobContainer",
                                            "type": "Expression"
                                        },
                                        "directory": {
                                            "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
                                            "type": "Expression"
                                        },
                                        "file": "abc"
                                    },
                                    "SinkCSV": {
                                        "directory": {
                                            "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
                                            "type": "Expression"
                                        },
                                        "file": "abc",
                                        "container": {
                                            "value": "@pipeline().parameters.blobContainer",
                                            "type": "Expression"
                                        }
                                    },
                                    "sinkLatestJsonl": {
                                        "container": {
                                            "value": "@pipeline().parameters.blobContainer",
                                            "type": "Expression"
                                        },
                                        "directory": {
                                            "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
                                            "type": "Expression"
                                        },
                                        "file": {
                                            "value": "@concat(pipeline().parameters.filename,'.jsonl')",
                                            "type": "Expression"
                                        }
                                    },
                                    "SinkLatestCSV": {
                                        "directory": {
                                            "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
                                            "type": "Expression"
                                        },
                                        "file": {
                                            "value": "@concat(pipeline().parameters.filename,'.csv')",
                                            "type": "Expression"
                                        },
                                        "container": {
                                            "value": "@pipeline().parameters.blobContainer",
                                            "type": "Expression"
                                        }
                                    },
                                    "sinkSql": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "parameters": {
                    "sourceFilename": {
                        "type": "string",
                        "defaultValue": "states_daily_4pm_et.csv"
                    },
                    "blobContainer": {
                        "type": "string",
                        "defaultValue": "public"
                    },
                    "rawBlobDirectory": {
                        "type": "string",
                        "defaultValue": "raw/covid-19/covid_tracking"
                    },
                    "curatedBlobDirectory": {
                        "type": "string",
                        "defaultValue": "curated/covid-19/covid_tracking"
                    },
                    "filename": {
                        "type": "string",
                        "defaultValue": "covid_tracking"
                    }
                },
                "folder": {
                    "name": "Case Data"
                },
                "annotations": [],
                "lastPublishTime": "2020-12-14T08:13:05Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/Github_dataset')]",
                "[concat(variables('factoryId'), '/datasets/csv_dataset1')]",
                "[concat(variables('factoryId'), '/datasets/json_dataset1')]",
                "[concat(variables('factoryId'), '/datasets/GetCurrentCSVFile')]",
                "[concat(variables('factoryId'), '/datasets/SaveCurrentSchemaDataset')]",
                "[concat(variables('factoryId'), '/datasets/GetLastSchemaDataset')]",
                "[concat(variables('factoryId'), '/dataflows/CovidTracking_Dataset_SinkSQL')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Github_dataset')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "HttpServer1_GitHub",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "Sources"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "HttpServerLocation"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[parameters('factoryName')]",
                "[concat(variables('factoryId'), '/linkedServices/HttpServer1_GitHub')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/csv_dataset1')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureBlobStorage1",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "directory": {
                        "type": "string"
                    },
                    "file": {
                        "type": "string"
                    },
                    "container": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Parameterized"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "fileName": {
                            "value": "@dataset().file",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().directory",
                            "type": "Expression"
                        },
                        "container": {
                            "value": "@dataset().container",
                            "type": "Expression"
                        }
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[parameters('factoryName')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/json_dataset1')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureBlobStorage1",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "container": {
                        "type": "string"
                    },
                    "directory": {
                        "type": "string"
                    },
                    "file": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Parameterized"
                },
                "annotations": [],
                "type": "Json",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "fileName": {
                            "value": "@dataset().file",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().directory",
                            "type": "Expression"
                        },
                        "container": {
                            "value": "@dataset().container",
                            "type": "Expression"
                        }
                    }
                },
                "schema": {}
            },
            "dependsOn": [
                "[parameters('factoryName')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/csv_sinkonly_dataset1')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureBlobStorage1",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "directory": {
                        "type": "string"
                    },
                    "file": {
                        "type": "string"
                    },
                    "container": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Parameterized"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "folderPath": {
                            "value": "@dataset().directory",
                            "type": "Expression"
                        },
                        "container": {
                            "value": "@dataset().container",
                            "type": "Expression"
                        }
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[parameters('factoryName')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/parquet_dataset1')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureBlobStorage1",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "container": {
                        "type": "string"
                    },
                    "directory": {
                        "type": "string"
                    },
                    "file": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Parameterized"
                },
                "annotations": [],
                "type": "Parquet",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "folderPath": {
                            "value": "@dataset().directory",
                            "type": "Expression"
                        },
                        "container": {
                            "value": "@dataset().container",
                            "type": "Expression"
                        }
                    },
                    "compressionCodec": "snappy"
                },
                "schema": []
            },
            "dependsOn": [
                "[parameters('factoryName')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/GetCurrentCSVFile')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureBlobStorage1",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "SchemaChnages"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "fileName": "states_daily_4pm_et.csv",
                        "folderPath": "raw/covid-19/covid_tracking/latest",
                        "container": "public"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": [
                    {
                        "name": "date",
                        "type": "String"
                    },
                    {
                        "name": "county",
                        "type": "String"
                    },
                    {
                        "name": "world_state",
                        "type": "String"
                    },
                    {
                        "name": "new_fips",
                        "type": "String"
                    },
                    {
                        "name": "cases",
                        "type": "String"
                    },
                    {
                        "name": "deaths",
                        "type": "String"
                    },
                    {
                        "name": "newabc",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[parameters('factoryName')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/SaveCurrentSchemaDataset')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureBlobStorage1",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "SchemaChnages"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "fileName": "Current_schema.csv",
                        "container": "schemachanges"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": [
                    {
                        "name": "date",
                        "type": "String"
                    },
                    {
                        "name": "county",
                        "type": "String"
                    },
                    {
                        "name": "state",
                        "type": "String"
                    },
                    {
                        "name": "fips",
                        "type": "String"
                    },
                    {
                        "name": "cases",
                        "type": "String"
                    },
                    {
                        "name": "deaths",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[parameters('factoryName')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/GetLastSchemaDataset')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureBlobStorage1",
                    "type": "LinkedServiceReference"
                },
                "folder": {
                    "name": "SchemaChnages"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "fileName": "Last_schema.csv",
                        "container": "schemachanges"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": [
                    {
                        "name": "date",
                        "type": "String"
                    },
                    {
                        "name": "county",
                        "type": "String"
                    },
                    {
                        "name": "state",
                        "type": "String"
                    },
                    {
                        "name": "fips",
                        "type": "String"
                    },
                    {
                        "name": "cases",
                        "type": "String"
                    },
                    {
                        "name": "deaths",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[parameters('factoryName')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
            ]
        },
        {
            "condition":"[equals(parameters('Save_into_SQL'),'Yes')]",
            "name": "[concat(parameters('factoryName'), '/SinkSQL_dataset')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "SQLLinkedService",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "table_name": {
                        "type": "string",
                        "defaultValue": "test"
                    }
                },
                "folder": {
                    "name": "Parameterized"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [],
                "typeProperties": {
                    "table": {
                        "value": "@dataset().table_name",
                        "type": "Expression"
                    }
                }
            },
            "dependsOn": [
                "[parameters('factoryName')]",
                "[concat(variables('factoryId'), '/linkedServices/SQLLinkedService')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/HttpServer1_GitHub')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "This is linked service which linked the input to the Data Factory.",
                "annotations": [],
                "type": "HttpServer",
                "typeProperties": {
                    "url": "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv",
                    "enableServerCertificateValidation": true,
                    "authenticationType": "Anonymous"
                }
            },
            "dependsOn": [
                "[parameters('factoryName')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureBlobStorage",
                "typeProperties": {
                    "connectionString": "[concat('DefaultEndpointsProtocol=https;AccountName=',parameters('storageAccountName'),';AccountKey=',listKeys(variables('storageAccountId'), '2019-06-01').keys[0].value)]"
                }
            },
            "dependsOn": [
                "[parameters('factoryName')]"
            ]
        },
        {
            "condition":"[equals(parameters('Save_into_SQL'),'Yes')]",
            "name": "[concat(parameters('factoryName'), '/SQLLinkedService')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "This is a linked service which is used to sink the data in SQL database.",
                "annotations": [],
                "type": "AzureSqlDatabase",
                "typeProperties": {
                    "connectionString": "[concat('Server=tcp:',parameters('yourserver'),'.database.windows.net',',1433;Initial Catalog=',parameters('yourdb'),';Persist Security Info=False;User ID=',parameters('serverlogin'),';Password=',parameters('serverpassword'),';MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;')]"
                }
            },
            "dependsOn": [
                "[parameters('factoryName')]",
                "[parameters('yourserver')]",
                "[parameters('yourdb')]"
            ]
        },
        {
            "condition":"[equals(parameters('Save_into_SQL'),'No')]",
            "name": "[concat(parameters('factoryName'), '/CovidTracking_Dataset')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "csv_dataset1",
                                "type": "DatasetReference"
                            },
                            "name": "sourceCSV"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "parquet_dataset1",
                                "type": "DatasetReference"
                            },
                            "name": "sinkParquet"
                        },
                        {
                            "dataset": {
                                "referenceName": "parquet_dataset1",
                                "type": "DatasetReference"
                            },
                            "name": "sinkLatestParquet"
                        },
                        {
                            "dataset": {
                                "referenceName": "json_dataset1",
                                "type": "DatasetReference"
                            },
                            "name": "sinkJsonl"
                        },
                        {
                            "dataset": {
                                "referenceName": "csv_sinkonly_dataset1",
                                "type": "DatasetReference"
                            },
                            "name": "SinkCSV"
                        },
                        {
                            "dataset": {
                                "referenceName": "json_dataset1",
                                "type": "DatasetReference"
                            },
                            "name": "sinkLatestJsonl"
                        },
                        {
                            "dataset": {
                                "referenceName": "csv_sinkonly_dataset1",
                                "type": "DatasetReference"
                            },
                            "name": "SinkLatestCSV"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "Add4columns"
                        },
                        {
                            "name": "ReformatHeadingAndColumns"
                        }
                    ],
                    "script": "parameters{\n\tfilename as string ('covid_tracking'),\n\trunid as string ('runtime_guid')\n}\nsource(output(\n\t\tdate as date,\n\t\tcounty as string,\n\t\tstate as string,\n\t\tfips as integer,\n\t\tcases as short,\n\t\tdeaths as short\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> sourceCSV\nsourceCSV derive(Load_Date = currentDate('UTC'),\n\t\tLoad_Time = currentUTC('yyyy-MM-dd'),\n\t\tISO_Country = 'US',\n\t\tDeath_Rate = toInteger(divide(deaths, cases)*100)) ~> Add4columns\nAdd4columns select(mapColumn(\n\t\tLoad_Date,\n\t\tLoad_Time,\n\t\tRecord_Date = date,\n\t\tCounty = county,\n\t\tState = state,\n\t\tFips = fips,\n\t\tCases = cases,\n\t\tDeaths = deaths,\n\t\tISO_Country,\n\t\tDeath_Rate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ReformatHeadingAndColumns\nReformatHeadingAndColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[(concat($filename,'_', $runid,'.parquet'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkParquet\nReformatHeadingAndColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[(concat($filename, '.parquet'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkLatestParquet\nReformatHeadingAndColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat($filename,'_', $runid,'.jsonl'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkJsonl\nReformatHeadingAndColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat($filename,'_', $runid,'.csv'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SinkCSV\nReformatHeadingAndColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat($filename, '.jsonl'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkLatestJsonl\nReformatHeadingAndColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat($filename, '.csv'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SinkLatestCSV"
                }
            },
            "dependsOn": [
                "[parameters('factoryName')]",
                "[concat(variables('factoryId'), '/datasets/csv_dataset1')]",
                "[concat(variables('factoryId'), '/datasets/parquet_dataset1')]",
                "[concat(variables('factoryId'), '/datasets/json_dataset1')]",
                "[concat(variables('factoryId'), '/datasets/csv_sinkonly_dataset1')]"
            ]
        },
        {
            "condition":"[equals(parameters('Save_into_SQL'),'Yes')]",
            "name": "[concat(parameters('factoryName'), '/CovidTracking_Dataset_SinkSQL')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "csv_dataset1",
                                "type": "DatasetReference"
                            },
                            "name": "sourceCSV"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "parquet_dataset1",
                                "type": "DatasetReference"
                            },
                            "name": "sinkParquet"
                        },
                        {
                            "dataset": {
                                "referenceName": "parquet_dataset1",
                                "type": "DatasetReference"
                            },
                            "name": "sinkLatestParquet"
                        },
                        {
                            "dataset": {
                                "referenceName": "json_dataset1",
                                "type": "DatasetReference"
                            },
                            "name": "sinkJsonl"
                        },
                        {
                            "dataset": {
                                "referenceName": "csv_sinkonly_dataset1",
                                "type": "DatasetReference"
                            },
                            "name": "SinkCSV"
                        },
                        {
                            "dataset": {
                                "referenceName": "json_dataset1",
                                "type": "DatasetReference"
                            },
                            "name": "sinkLatestJsonl"
                        },
                        {
                            "dataset": {
                                "referenceName": "csv_sinkonly_dataset1",
                                "type": "DatasetReference"
                            },
                            "name": "SinkLatestCSV"
                        },
                        {
                            "dataset": {
                                "referenceName": "SinkSQL_dataset",
                                "type": "DatasetReference"
                            },
                            "name": "sinkSql"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "Add4columns"
                        },
                        {
                            "name": "ReformatHeadingAndColumns"
                        }
                    ],
                    "script": "parameters{\n\tfilename as string ('covid_tracking'),\n\trunid as string ('runtime_guid')\n}\nsource(output(\n\t\tdate as date,\n\t\tcounty as string,\n\t\tstate as string,\n\t\tfips as integer,\n\t\tcases as short,\n\t\tdeaths as short\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> sourceCSV\nsourceCSV derive(Load_Date = currentDate('UTC'),\n\t\tLoad_Time = currentUTC('yyyy-MM-dd'),\n\t\tISO_Country = 'US',\n\t\tDeath_Rate = toInteger(divide(deaths, cases)*100)) ~> Add4columns\nAdd4columns select(mapColumn(\n\t\tLoad_Date,\n\t\tLoad_Time,\n\t\tRecord_Date = date,\n\t\tCounty = county,\n\t\tState = state,\n\t\tFips = fips,\n\t\tCases = cases,\n\t\tDeaths = deaths,\n\t\tISO_Country,\n\t\tDeath_Rate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ReformatHeadingAndColumns\nReformatHeadingAndColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[(concat($filename,'_', $runid,'.parquet'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkParquet\nReformatHeadingAndColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[(concat($filename, '.parquet'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkLatestParquet\nReformatHeadingAndColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat($filename,'_', $runid,'.jsonl'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkJsonl\nReformatHeadingAndColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat($filename,'_', $runid,'.csv'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SinkCSV\nReformatHeadingAndColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat($filename, '.jsonl'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkLatestJsonl\nReformatHeadingAndColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat($filename, '.csv'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SinkLatestCSV\nReformatHeadingAndColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sinkSql"
                }
            },
            "dependsOn": [
                "[parameters('factoryName')]",
                "[concat(variables('factoryId'), '/datasets/csv_dataset1')]",
                "[concat(variables('factoryId'), '/datasets/parquet_dataset1')]",
                "[concat(variables('factoryId'), '/datasets/json_dataset1')]",
                "[concat(variables('factoryId'), '/datasets/csv_sinkonly_dataset1')]",
                "[concat(variables('factoryId'), '/datasets/SinkSQL_dataset')]"
            ]
        },
        {
            "type": "microsoft.insights/actionGroups",
            "apiVersion": "2019-03-01",
            "name": "[parameters('Action_Group_Name')]",
            "location": "Global",
            "properties": {
                "groupShortName": "New-NY-Actio",
                "enabled": true,
                "emailReceivers": [
                    {
                        "name": "SendEmail_-EmailAction-",
                        "emailAddress": "[parameters('Action_Email')]",
                        "useCommonAlertSchema": false
                    }
                ],
                "smsReceivers": [],
                "webhookReceivers": [
                    {
                        "name": "new-webhook",
                        "serviceUri": "[listCallbackURL(concat(resourceId('Microsoft.Logic/workflows', parameters('Logic_App_Name')), '/triggers/manual'), '2016-10-01').value]",
                        "useCommonAlertSchema": false
                    }
                ],
                "itsmReceivers": [],
                "azureAppPushReceivers": [],
                "automationRunbookReceivers": [],
                "voiceReceivers": [],
                "logicAppReceivers": [],
                "azureFunctionReceivers": []
            },
            "dependsOn": [
                "[resourceId('Microsoft.Logic/workflows', parameters('Logic_App_Name'))]"
            ]
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[parameters('Teams_connections_name')]",
            "location": "eastus",
            "kind": "V1",
            "properties": {
                "displayName": "ahmadasad@emumbapvtgmail.onmicrosoft.com",
                "customParameterValues": {},
                "api": {
                    "id": "/subscriptions/6df48df0-802d-4891-9f31-7cc1879f3cb4/providers/Microsoft.Web/locations/eastus/managedApis/teams"
                }
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('Logic_App_Name')]",
            "location": "eastus",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', parameters('Teams_connections_name'))]"
            ],
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "manual": {
                            "type": "Request",
                            "kind": "Http",
                            "inputs": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "properties": {
                                                "context": {
                                                    "properties": {
                                                        "condition": {
                                                            "properties": {
                                                                "allOf": {
                                                                    "items": {
                                                                        "properties": {
                                                                            "dimensions": {
                                                                                "items": {
                                                                                    "properties": {
                                                                                        "name": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "value": {
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "required": [
                                                                                        "name",
                                                                                        "value"
                                                                                    ],
                                                                                    "type": "object"
                                                                                },
                                                                                "type": "array"
                                                                            },
                                                                            "metricName": {
                                                                                "type": "string"
                                                                            },
                                                                            "metricNamespace": {
                                                                                "type": "string"
                                                                            },
                                                                            "metricValue": {
                                                                                "type": "integer"
                                                                            },
                                                                            "operator": {
                                                                                "type": "string"
                                                                            },
                                                                            "threshold": {
                                                                                "type": "string"
                                                                            },
                                                                            "timeAggregation": {
                                                                                "type": "string"
                                                                            },
                                                                            "webTestName": {}
                                                                        },
                                                                        "required": [
                                                                            "metricName",
                                                                            "metricNamespace",
                                                                            "operator",
                                                                            "threshold",
                                                                            "timeAggregation",
                                                                            "dimensions",
                                                                            "metricValue",
                                                                            "webTestName"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "windowSize": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "conditionType": {
                                                            "type": "string"
                                                        },
                                                        "description": {
                                                            "type": "string"
                                                        },
                                                        "id": {
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "type": "string"
                                                        },
                                                        "portalLink": {
                                                            "type": "string"
                                                        },
                                                        "resourceGroupName": {
                                                            "type": "string"
                                                        },
                                                        "resourceId": {
                                                            "type": "string"
                                                        },
                                                        "resourceName": {
                                                            "type": "string"
                                                        },
                                                        "resourceType": {
                                                            "type": "string"
                                                        },
                                                        "severity": {
                                                            "type": "string"
                                                        },
                                                        "subscriptionId": {
                                                            "type": "string"
                                                        },
                                                        "timestamp": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "properties": {},
                                                "status": {
                                                    "type": "string"
                                                },
                                                "version": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "schemaId": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "actions": {
                        "Switch": {
                            "runAfter": {},
                            "cases": {
                                "Case": {
                                    "case": "PipelineFailedRuns",
                                    "actions": {
                                        "Post_a_message_(V3)": {
                                            "runAfter": {},
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "body": {
                                                    "body": {
                                                        "content": "<p><span style=\"font-size: 14px\"><strong>Hello this is Pipeline Failure Alert Please check this:<br>\n<br>\n &nbsp;&nbsp;<br>\nAlert name: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['name']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;&nbsp;<br>\nDescription: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['description']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;<br>\nResourceGroup Name: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['resourceGroupName']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;&nbsp;&nbsp;<br>\nResource Name: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['resourceName']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;&nbsp;<br>\nResource Type: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['resourceType']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;&nbsp;<br>\nFailed Pipeline Name: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody().data.context.condition.allOf[0].dimensions[1]['value']}</strong></span><span style=\"font-size: 14px\"><strong><br>\nFailure Type: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody().data.context.condition.allOf[0].dimensions[2]['value']}</strong></span><span style=\"font-size: 14px\"><strong></strong></span></p>",
                                                        "contentType": "html"
                                                    }
                                                },
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['teams_1']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "path": "/v3/beta/teams/@{encodeURIComponent('7ee21ca8-fec4-4608-b0a2-b0721d119588')}/channels/@{encodeURIComponent('19:bd493696436340bf82a2b299fa9080a3@thread.tacv2')}/messages"
                                            }
                                        }
                                    }
                                },
                                "Case_2": {
                                    "case": "PipelineCancelledRuns",
                                    "actions": {
                                        "Post_a_message_(V3)_2": {
                                            "runAfter": {},
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "body": {
                                                    "body": {
                                                        "content": "<p><span style=\"font-size: 14px\"><strong>Hello this is Pipeline Cancellation Alert:<br>\n<br>\n&nbsp;<br>\nAlert name: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['name']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;&nbsp;<br>\nDescription: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['description']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;<br>\nResourceGroup Name: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['resourceGroupName']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;&nbsp;&nbsp;<br>\nResource Name: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['resourceName']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;&nbsp;<br>\nResource Type: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['resourceType']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;&nbsp;<br>\nCancelled Pipeline Name: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody().data.context.condition.allOf[0].dimensions[1]['value']}</strong></span><span style=\"font-size: 14px\"><strong></strong></span></p>",
                                                        "contentType": "html"
                                                    }
                                                },
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['teams_1']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "path": "/v3/beta/teams/@{encodeURIComponent('7ee21ca8-fec4-4608-b0a2-b0721d119588')}/channels/@{encodeURIComponent('19:bd493696436340bf82a2b299fa9080a3@thread.tacv2')}/messages"
                                            }
                                        }
                                    }
                                },
                                "Case_3": {
                                    "case": "ActivityFailedRuns",
                                    "actions": {
                                        "Post_a_message_(V3)_3": {
                                            "runAfter": {},
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "body": {
                                                    "body": {
                                                        "content": "<p><span style=\"font-size: 14px\"><strong>Hello this is Activity Failure Alert:<br>\n<br>\n<br>\nAlert name: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['name']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;&nbsp;<br>\nDescription: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['description']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;&nbsp;<br>\nResourceGroup Name: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['resourceGroupName']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;&nbsp;&nbsp;<br>\nResource Name: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['resourceName']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;&nbsp;<br>\nResource Type: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['resourceType']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;&nbsp;<br>\nFailed Activity Type: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody().data.context.condition.allOf[0].dimensions[1]['value']}</strong></span><span style=\"font-size: 14px\"><strong><br>\nFailed Activity Name: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody().data.context.condition.allOf[0].dimensions[2]['value']}</strong></span><span style=\"font-size: 14px\"><strong><br>\nFailure Type: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody().data.context.condition.allOf[0].dimensions[4]['value']}</strong></span><span style=\"font-size: 14px\"><strong>&nbsp;</strong></span></p>",
                                                        "contentType": "html"
                                                    }
                                                },
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['teams_1']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "path": "/v3/beta/teams/@{encodeURIComponent('7ee21ca8-fec4-4608-b0a2-b0721d119588')}/channels/@{encodeURIComponent('19:bd493696436340bf82a2b299fa9080a3@thread.tacv2')}/messages"
                                            }
                                        }
                                    }
                                },
                                "Case_4": {
                                    "case": "ActivityCancelledRuns",
                                    "actions": {
                                        "Post_a_message_(V3)_4": {
                                            "runAfter": {},
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "body": {
                                                    "body": {
                                                        "content": "<p><span style=\"font-size: 14px\"><strong>Hello this is Activity Cancellation Alert:<br>\n<br>\n<br>\nAlert name: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['name']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;&nbsp;<br>\nDescription: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['description']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;&nbsp;<br>\nResourceGroup Name: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['resourceGroupName']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;&nbsp;&nbsp;<br>\nResource Name: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['resourceName']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;&nbsp;<br>\nResource Type: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['resourceType']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;&nbsp;<br>\nCancelled Activity Type: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody().data.context.condition.allOf[0].dimensions[1]['value']}</strong></span><span style=\"font-size: 14px\"><strong><br>\nCancelled Activity Name: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody().data.context.condition.allOf[0].dimensions[2]['value']}</strong></span><span style=\"font-size: 14px\"><strong></strong></span><br>\n&nbsp;</p>",
                                                        "contentType": "html"
                                                    }
                                                },
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['teams_1']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "path": "/v3/beta/teams/@{encodeURIComponent('7ee21ca8-fec4-4608-b0a2-b0721d119588')}/channels/@{encodeURIComponent('19:bd493696436340bf82a2b299fa9080a3@thread.tacv2')}/messages"
                                            }
                                        }
                                    }
                                },
                                "Case_5": {
                                    "case": "PipelineSucceededRuns",
                                    "actions": {
                                        "Post_a_message_(V3)_5": {
                                            "runAfter": {},
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "body": {
                                                    "body": {
                                                        "content": "<p><span style=\"font-size: 14px\"><strong>This is an Alert Message your pipeline is Success:<br>\n<br>\n<br>\nAlert name: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['name']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;&nbsp;<br>\nDescription: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['description']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;&nbsp;<br>\nResourceGroup Name: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['resourceGroupName']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;&nbsp;&nbsp;<br>\nResource Name: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['resourceName']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;&nbsp;<br>\nResource Type: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['resourceType']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;&nbsp;<br>\nFailed Pipeline Name: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody().data.context.condition.allOf[0].dimensions[1]['value']}</strong></span><span style=\"font-size: 14px\"><strong><br>\nFailure Type: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody().data.context.condition.allOf[0].dimensions[2]['value']}</strong></span><span style=\"font-size: 14px\"><strong></strong></span></p>",
                                                        "contentType": "html"
                                                    }
                                                },
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['teams_1']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "path": "/v3/beta/teams/@{encodeURIComponent('7ee21ca8-fec4-4608-b0a2-b0721d119588')}/channels/@{encodeURIComponent('19:bd493696436340bf82a2b299fa9080a3@thread.tacv2')}/messages"
                                            }
                                        }
                                    }
                                },
                                "Case_6": {
                                    "case": "ActivitySucceededRuns",
                                    "actions": {
                                        "Switch_2": {
                                            "runAfter": {},
                                            "cases": {
                                                "Case": {
                                                    "case": "Alert-SchemaHasMoreColumns ",
                                                    "actions": {
                                                        "Post_a_message_(V3)_8": {
                                                            "runAfter": {},
                                                            "type": "ApiConnection",
                                                            "inputs": {
                                                                "body": {
                                                                    "body": {
                                                                        "content": "<p><span style=\"font-size: 14px\"><strong>This is an Alert Message your schema has been changed.<br>\nIt has more columns.<br>\n<br>\n<br>\nAlert name: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['name']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;&nbsp;<br>\nDescription: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['description']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;&nbsp;<br>\nResourceGroup Name: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['resourceGroupName']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;&nbsp;&nbsp;<br>\nResource Name: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['resourceName']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;&nbsp;<br>\nResource Type: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['resourceType']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;&nbsp;<br>\nFailed Pipeline Name: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody().data.context.condition.allOf[0].dimensions[1]['value']}</strong></span><span style=\"font-size: 14px\"><strong><br>\nFailure Type: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody().data.context.condition.allOf[0].dimensions[2]['value']}</strong></span><span style=\"font-size: 14px\"><strong></strong></span></p>",
                                                                        "contentType": "html"
                                                                    }
                                                                },
                                                                "host": {
                                                                    "connection": {
                                                                        "name": "@parameters('$connections')['teams_1']['connectionId']"
                                                                    }
                                                                },
                                                                "method": "post",
                                                                "path": "/v3/beta/teams/@{encodeURIComponent('7ee21ca8-fec4-4608-b0a2-b0721d119588')}/channels/@{encodeURIComponent('19:bd493696436340bf82a2b299fa9080a3@thread.tacv2')}/messages"
                                                            }
                                                        }
                                                    }
                                                },
                                                "Case_2": {
                                                    "case": "Alert-SchemaHasLessColumns ",
                                                    "actions": {
                                                        "Post_a_message_(V3)_9": {
                                                            "runAfter": {},
                                                            "type": "ApiConnection",
                                                            "inputs": {
                                                                "body": {
                                                                    "body": {
                                                                        "content": "<p><span style=\"font-size: 14px\"><strong>This is an Alert Message your schema has been changed.<br>\nIt has less columns.<br>\n<br>\n<br>\nAlert name: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['name']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;&nbsp;<br>\nDescription: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['description']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;&nbsp;<br>\nResourceGroup Name: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['resourceGroupName']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;&nbsp;&nbsp;<br>\nResource Name: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['resourceName']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;&nbsp;<br>\nResource Type: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['resourceType']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;&nbsp;<br>\nFailed Pipeline Name: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody().data.context.condition.allOf[0].dimensions[1]['value']}</strong></span><span style=\"font-size: 14px\"><strong><br>\nFailure Type: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody().data.context.condition.allOf[0].dimensions[2]['value']}</strong></span><span style=\"font-size: 14px\"><strong></strong></span></p>",
                                                                        "contentType": "html"
                                                                    }
                                                                },
                                                                "host": {
                                                                    "connection": {
                                                                        "name": "@parameters('$connections')['teams_1']['connectionId']"
                                                                    }
                                                                },
                                                                "method": "post",
                                                                "path": "/v3/beta/teams/@{encodeURIComponent('7ee21ca8-fec4-4608-b0a2-b0721d119588')}/channels/@{encodeURIComponent('19:bd493696436340bf82a2b299fa9080a3@thread.tacv2')}/messages"
                                                            }
                                                        }
                                                    }
                                                },
                                                "Case_3": {
                                                    "case": "Alert-SchemaHasSameColumnsButDifferentStructure ",
                                                    "actions": {
                                                        "Post_a_message_(V3)_10": {
                                                            "runAfter": {},
                                                            "type": "ApiConnection",
                                                            "inputs": {
                                                                "body": {
                                                                    "body": {
                                                                        "content": "<p><span style=\"font-size: 14px\"><strong>This is an Alert Message your schema has been changed.<br>\nIt has Equall columns but different columns arrangements..<br>\n<br>\n<br>\nAlert name: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['name']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;&nbsp;<br>\nDescription: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['description']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;&nbsp;<br>\nResourceGroup Name: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['resourceGroupName']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;&nbsp;&nbsp;<br>\nResource Name: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['resourceName']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;&nbsp;<br>\nResource Type: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody()['data']['context']['resourceType']}</strong></span><span style=\"font-size: 14px\"><strong> &nbsp;&nbsp;&nbsp;<br>\nFailed Pipeline Name: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody().data.context.condition.allOf[0].dimensions[1]['value']}</strong></span><span style=\"font-size: 14px\"><strong><br>\nFailure Type: </strong></span><span style=\"font-size: 14px\"><strong>@{triggerBody().data.context.condition.allOf[0].dimensions[2]['value']}</strong></span><span style=\"font-size: 14px\"><strong></strong></span></p>",
                                                                        "contentType": "html"
                                                                    }
                                                                },
                                                                "host": {
                                                                    "connection": {
                                                                        "name": "@parameters('$connections')['teams_1']['connectionId']"
                                                                    }
                                                                },
                                                                "method": "post",
                                                                "path": "/v3/beta/teams/@{encodeURIComponent('7ee21ca8-fec4-4608-b0a2-b0721d119588')}/channels/@{encodeURIComponent('19:bd493696436340bf82a2b299fa9080a3@thread.tacv2')}/messages"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "default": {
                                                "actions": {
                                                    "Post_a_message_(V3)_6": {
                                                        "runAfter": {},
                                                        "type": "ApiConnection",
                                                        "inputs": {
                                                            "body": {
                                                                "body": {
                                                                    "content": "<p>This is second default case.<br>\nNo such case is found.</p>",
                                                                    "contentType": "html"
                                                                }
                                                            },
                                                            "host": {
                                                                "connection": {
                                                                    "name": "@parameters('$connections')['teams_1']['connectionId']"
                                                                }
                                                            },
                                                            "method": "post",
                                                            "path": "/v3/beta/teams/@{encodeURIComponent('7ee21ca8-fec4-4608-b0a2-b0721d119588')}/channels/@{encodeURIComponent('19:bd493696436340bf82a2b299fa9080a3@thread.tacv2')}/messages"
                                                        }
                                                    }
                                                }
                                            },
                                            "expression": "@{triggerBody()['data']['context']['name']} ",
                                            "type": "Switch"
                                        }
                                    }
                                }
                            },
                            "default": {
                                "actions": {
                                    "Post_a_message_(V3)_7": {
                                        "runAfter": {},
                                        "type": "ApiConnection",
                                        "inputs": {
                                            "body": {
                                                "body": {
                                                    "content": "<p>This is Default condition in switch. No relevent Alert is found in switch.</p>",
                                                    "contentType": "html"
                                                }
                                            },
                                            "host": {
                                                "connection": {
                                                    "name": "@parameters('$connections')['teams_1']['connectionId']"
                                                }
                                            },
                                            "method": "post",
                                            "path": "/v3/beta/teams/@{encodeURIComponent('7ee21ca8-fec4-4608-b0a2-b0721d119588')}/channels/@{encodeURIComponent('19:bd493696436340bf82a2b299fa9080a3@thread.tacv2')}/messages"
                                        }
                                    }
                                }
                            },
                            "expression": "@triggerBody().data.context.condition.allOf[0].metricName",
                            "type": "Switch"
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "teams_1": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('Teams_connections_name'))]",
                                "connectionName": "[parameters('Teams_connections_name')]",
                                "id": "/subscriptions/6df48df0-802d-4891-9f31-7cc1879f3cb4/providers/Microsoft.Web/locations/eastus/managedApis/teams"
                            }
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.Insights/metricalerts",
            "apiVersion": "2018-03-01",
            "name": "Alert-PipelineSucceeded",
            "location": "global",
            "dependsOn": [
                "[parameters('factoryName')]",
                "[resourceId('microsoft.insights/actionGroups', parameters('Action_Group_Name'))]"
            ],
            "properties": {
                "description": "Pipeline success!!!",
                "severity": 1,
                "enabled": true,
                "scopes": [
                    "[resourceId('Microsoft.DataFactory/factories', parameters('factoryName'))]"
                ],
                "evaluationFrequency": "PT1M",
                "windowSize": "PT1M",
                "criteria": {
                    "allOf": [
                        {
                            "threshold": 1,
                            "name": "ebf5af93-ce7c-4976-bd75-f453d78ac008",
                            "metricNamespace": "Microsoft.DataFactory/factories",
                            "metricName": "PipelineSucceededRuns",
                            "dimensions": [
                                {
                                    "name": "Name",
                                    "operator": "Include",
                                    "values": [
                                        "Covid_Tracking",
                                        "Covid_Tracking_SinkSQL"
                                    ]
                                },
                                {
                                    "name": "FailureType",
                                    "operator": "Include",
                                    "values": [
                                        "none"
                                    ]
                                }
                            ],
                            "operator": "GreaterThanOrEqual",
                            "timeAggregation": "Average",
                            "criterionType": "StaticThresholdCriterion"
                        }
                    ],
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "targetResourceType": "microsoft.datafactory/factories",
                "actions": [
                    {
                        "actionGroupId": "[resourceId('microsoft.insights/actionGroups', parameters('Action_Group_Name'))]",
                        "webHookProperties": {}
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Insights/metricalerts",
            "apiVersion": "2018-03-01",
            "name": "Alert-ActivityCancel",
            "location": "global",
            "dependsOn": [
                "[parameters('factoryName')]",
                "[resourceId('microsoft.insights/actionGroups', parameters('Action_Group_Name'))]"
            ],
            "properties": {
                "description": "Alert-ActivityCancel",
                "severity": 1,
                "enabled": true,
                "scopes": [
                    "[resourceId('Microsoft.DataFactory/factories', parameters('factoryName'))]"
                ],
                "evaluationFrequency": "PT1M",
                "windowSize": "PT1M",
                "criteria": {
                    "allOf": [
                        {
                            "threshold": 1,
                            "name": "0dba6785-59c7-4e5d-98ba-b244d548eddf",
                            "metricNamespace": "Microsoft.DataFactory/factories",
                            "metricName": "ActivityCancelledRuns",
                            "dimensions": [
                                {
                                    "name": "ActivityType",
                                    "operator": "Include",
                                    "values": [
                                        "Copy",
                                        "ExecuteDataFlow"
                                    ]
                                },
                                {
                                    "name": "Name",
                                    "operator": "Include",
                                    "values": [
                                        "ToRawPartition",
                                        "ToRawOverwrite",
                                        "CovidTracking_Dataset",
                                        "JSONLtoJSONLATEST",
                                        "JSONLtoJSON"
                                    ]
                                },
                                {
                                    "name": "PipelineName",
                                    "operator": "Include",
                                    "values": [
                                        "Covid_Tracking",
                                        "Covid_Tracking_SinkSQL"
                                    ]
                                },
                                {
                                    "name": "FailureType",
                                    "operator": "Include",
                                    "values": [
                                        "UserError",
                                        "SystemError",
                                        "BadGateway"
                                    ]
                                }
                            ],
                            "operator": "GreaterThanOrEqual",
                            "timeAggregation": "Average",
                            "criterionType": "StaticThresholdCriterion"
                        }
                    ],
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "targetResourceType": "microsoft.datafactory/factories",
                "actions": [
                    {
                        "actionGroupId": "[resourceId('microsoft.insights/actionGroups', parameters('Action_Group_Name'))]",
                        "webHookProperties": {}
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Insights/metricalerts",
            "apiVersion": "2018-03-01",
            "name": "Alert-ActivityFails",
            "location": "global",
            "dependsOn": [
                "[parameters('factoryName')]",
                "[resourceId('microsoft.insights/actionGroups', parameters('Action_Group_Name'))]"
            ],
            "properties": {
                "description": "Alerts Pipeline Fails",
                "severity": 1,
                "enabled": true,
                "scopes": [
                    "[resourceId('Microsoft.DataFactory/factories', parameters('factoryName'))]"
                ],
                "evaluationFrequency": "PT1M",
                "windowSize": "PT1M",
                "criteria": {
                    "allOf": [
                        {
                            "threshold": 1,
                            "name": "ActivityFailedRuns",
                            "metricNamespace": "Microsoft.DataFactory/factories",
                            "metricName": "ActivityFailedRuns",
                            "dimensions": [
                                {
                                    "name": "ActivityType",
                                    "operator": "Include",
                                    "values": [
                                        "Copy",
                                        "ExecuteDataFlow"
                                    ]
                                },
                                {
                                    "name": "Name",
                                    "operator": "Include",
                                    "values": [
                                        "ToRawPartition",
                                        "ToRawOverwrite",
                                        "CovidTracking_Dataset",
                                        "JSONLtoJSONLATEST",
                                        "JSONLtoJSON"
                                    ]
                                },
                                {
                                    "name": "PipelineName",
                                    "operator": "Include",
                                    "values": [
                                        "Covid_Tracking",
                                        "Covid_Tracking_SinkSQL"
                                    ]
                                },
                                {
                                    "name": "FailureType",
                                    "operator": "Include",
                                    "values": [
                                        "UserError",
                                        "SystemError",
                                        "BadGateway"
                                    ]
                                }
                            ],
                            "operator": "GreaterThanOrEqual",
                            "timeAggregation": "Average",
                            "criterionType": "StaticThresholdCriterion"
                        }
                    ],
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "targetResourceType": "microsoft.datafactory/factories",
                "actions": [
                    {
                        "actionGroupId": "[resourceId('microsoft.insights/actionGroups', parameters('Action_Group_Name'))]",
                        "webHookProperties": {}
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Insights/metricalerts",
            "apiVersion": "2018-03-01",
            "name": "Alert-PipelineCancelled",
            "location": "global",
            "dependsOn": [
                "[parameters('factoryName')]",
                "[resourceId('microsoft.insights/actionGroups', parameters('Action_Group_Name'))]"
            ],
            "properties": {
                "description": "This pipeline is cancelled.",
                "severity": 1,
                "enabled": true,
                "scopes": [
                    "[resourceId('Microsoft.DataFactory/factories', parameters('factoryName'))]"
                ],
                "evaluationFrequency": "PT1M",
                "windowSize": "PT1M",
                "criteria": {
                    "allOf": [
                        {
                            "threshold": 1,
                            "name": "cea0aece-31c9-4afd-a6a0-cb8043e2dd11",
                            "metricNamespace": "Microsoft.DataFactory/factories",
                            "metricName": "PipelineCancelledRuns",
                            "dimensions": [
                                {
                                    "name": "Name",
                                    "operator": "Include",
                                    "values": [
                                        "Covid_Tracking",
                                        "Covid_Tracking_SinkSQL"
                                    ]
                                },
                                {
                                    "name": "FailureType",
                                    "operator": "Include",
                                    "values": [
                                        "UserError",
                                        "SystemError",
                                        "BadGateway"
                                    ]
                                }
                            ],
                            "operator": "GreaterThanOrEqual",
                            "timeAggregation": "Average",
                            "criterionType": "StaticThresholdCriterion"
                        }
                    ],
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "targetResourceType": "microsoft.datafactory/factories",
                "actions": [
                    {
                        "actionGroupId": "[resourceId('microsoft.insights/actionGroups', parameters('Action_Group_Name'))]",
                        "webHookProperties": {}
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Insights/metricalerts",
            "apiVersion": "2018-03-01",
            "name": "Alert-PipelinedFailed",
            "location": "global",
            "dependsOn": [
                "[parameters('factoryName')]",
                "[resourceId('microsoft.insights/actionGroups', parameters('Action_Group_Name'))]"
            ],
            "properties": {
                "description": "Alert-PipelinedFailed",
                "severity": 1,
                "enabled": true,
                "scopes": [
                    "[resourceId('Microsoft.DataFactory/factories', parameters('factoryName'))]"
                ],
                "evaluationFrequency": "PT1M",
                "windowSize": "PT1M",
                "criteria": {
                    "allOf": [
                        {
                            "threshold": 1,
                            "name": "8bffdd8c-2aec-469e-98bd-f5a7749c17ac",
                            "metricNamespace": "Microsoft.DataFactory/factories",
                            "metricName": "PipelineFailedRuns",
                            "dimensions": [
                                {
                                    "name": "Name",
                                    "operator": "Include",
                                    "values": [
                                        "Covid_Tracking",
                                        "Covid_Tracking_SinkSQL"
                                    ]
                                },
                                {
                                    "name": "FailureType",
                                    "operator": "Include",
                                    "values": [
                                        "UserError",
                                        "SystemError",
                                        "BadGateway"
                                    ]
                                }
                            ],
                            "operator": "GreaterThanOrEqual",
                            "timeAggregation": "Average",
                            "criterionType": "StaticThresholdCriterion"
                        }
                    ],
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "targetResourceType": "microsoft.datafactory/factories",
                "actions": [
                    {
                        "actionGroupId": "[resourceId('microsoft.insights/actionGroups', parameters('Action_Group_Name'))]",
                        "webHookProperties": {}
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Insights/metricalerts",
            "apiVersion": "2018-03-01",
            "name": "Alert_TriggerCancellation",
            "location": "global",
            "dependsOn": [
                "[parameters('factoryName')]",
                "[resourceId('microsoft.insights/actionGroups', parameters('Action_Group_Name'))]"
            ],
            "properties": {
                "description": "This is an alert that the trigger is cancelled.",
                "severity": 0,
                "enabled": true,
                "scopes": [
                    "[resourceId('Microsoft.DataFactory/factories', parameters('factoryName'))]"
                ],
                "evaluationFrequency": "PT1M",
                "windowSize": "PT1M",
                "criteria": {
                    "allOf": [
                        {
                            "threshold": 1,
                            "name": "ce2761f7-bc93-4f2e-a432-664b35355d9b",
                            "metricNamespace": "Microsoft.DataFactory/factories",
                            "metricName": "TriggerCancelledRuns",
                            "dimensions": [
                                {
                                    "name": "FailureType",
                                    "operator": "Include",
                                    "values": [
                                        "UserError",
                                        "SystemError",
                                        "BadGateway"
                                    ]
                                }
                            ],
                            "operator": "GreaterThanOrEqual",
                            "timeAggregation": "Average",
                            "criterionType": "StaticThresholdCriterion"
                        }
                    ],
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "targetResourceType": "microsoft.datafactory/factories",
                "actions": [
                    {
                        "actionGroupId": "[resourceId('microsoft.insights/actionGroups', parameters('Action_Group_Name'))]",
                        "webHookProperties": {}
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Insights/metricalerts",
            "apiVersion": "2018-03-01",
            "name": "Alert-SchemaHasLessColumns",
            "location": "global",
            "dependsOn": [
                "[parameters('factoryName')]",
                "[resourceId('microsoft.insights/actionGroups', parameters('Action_Group_Name'))]"
            ],
            "properties": {
                "description": "This is an alert to notify the Schema Has Less Columns.",
                "severity": 0,
                "enabled": true,
                "scopes": [
                    "[resourceId('Microsoft.DataFactory/factories', parameters('factoryName'))]"
                ],
                "evaluationFrequency": "PT1M",
                "windowSize": "PT1M",
                "criteria": {
                    "allOf": [
                        {
                            "threshold": 1,
                            "name": "62f98069-eba1-4d25-ba51-2ebf200dcc86",
                            "metricNamespace": "Microsoft.DataFactory/factories",
                            "metricName": "ActivitySucceededRuns",
                            "dimensions": [
                                {
                                    "name": "ActivityType",
                                    "operator": "Include",
                                    "values": [
                                        "Wait"
                                    ]
                                },
                                {
                                    "name": "Name",
                                    "operator": "Include",
                                    "values": [
                                        "Alert_Schema_Has_Less_Columns"
                                    ]
                                },
                                {
                                    "name": "PipelineName",
                                    "operator": "Include",
                                    "values": [
                                        "Covid_Tracking",
                                        "Covid_Tracking_SinkSQL"
                                    ]
                                },
                                {
                                    "name": "FailureType",
                                    "operator": "Include",
                                    "values": [
                                        "none"
                                    ]
                                }
                            ],
                            "operator": "GreaterThanOrEqual",
                            "timeAggregation": "Average",
                            "criterionType": "StaticThresholdCriterion"
                        }
                    ],
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "targetResourceType": "microsoft.datafactory/factories",
                "actions": [
                    {
                        "actionGroupId": "[resourceId('microsoft.insights/actionGroups', parameters('Action_Group_Name'))]",
                        "webHookProperties": {}
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Insights/metricalerts",
            "apiVersion": "2018-03-01",
            "name": "Alert-SchemaHasMoreColumns",
            "location": "global",
            "dependsOn": [
                "[parameters('factoryName')]",
                "[resourceId('microsoft.insights/actionGroups', parameters('Action_Group_Name'))]"
            ],
            "properties": {
                "description": "This is an alert to notify the Schema Has More Columns.",
                "severity": 0,
                "enabled": true,
                "scopes": [
                    "[resourceId('Microsoft.DataFactory/factories', parameters('factoryName'))]"
                ],
                "evaluationFrequency": "PT1M",
                "windowSize": "PT1M",
                "criteria": {
                    "allOf": [
                        {
                            "threshold": 1,
                            "name": "fabc9980-6efd-4d19-9542-a063d5497304",
                            "metricNamespace": "Microsoft.DataFactory/factories",
                            "metricName": "ActivitySucceededRuns",
                            "dimensions": [
                                {
                                    "name": "ActivityType",
                                    "operator": "Include",
                                    "values": [
                                        "Wait"
                                    ]
                                },
                                {
                                    "name": "Name",
                                    "operator": "Include",
                                    "values": [
                                        "Alert_Schema_Has_More_Columns"
                                    ]
                                },
                                {
                                    "name": "PipelineName",
                                    "operator": "Include",
                                    "values": [
                                        "Covid_Tracking",
                                        "Covid_Tracking_SinkSQL"
                                    ]
                                },
                                {
                                    "name": "FailureType",
                                    "operator": "Include",
                                    "values": [
                                        "none"
                                    ]
                                }
                            ],
                            "operator": "GreaterThanOrEqual",
                            "timeAggregation": "Average",
                            "criterionType": "StaticThresholdCriterion"
                        }
                    ],
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "targetResourceType": "microsoft.datafactory/factories",
                "actions": [
                    {
                        "actionGroupId": "[resourceId('microsoft.insights/actionGroups', parameters('Action_Group_Name'))]",
                        "webHookProperties": {}
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Insights/metricalerts",
            "apiVersion": "2018-03-01",
            "name": "Alert-SchemaHasSameColumnsButDifferentStructure",
            "location": "global",
            "dependsOn": [
                "[parameters('factoryName')]",
                "[resourceId('microsoft.insights/actionGroups', parameters('Action_Group_Name'))]"
            ],  
            "properties": {
                "description": "This is an alert to notify the Schema Has Same Columns But Different Structure.",
                "severity": 0,
                "enabled": true,
                "scopes": [
                    "[resourceId('Microsoft.DataFactory/factories', parameters('factoryName'))]"
                ],
                "evaluationFrequency": "PT1M",
                "windowSize": "PT1M",
                "criteria": {
                    "allOf": [
                        {
                            "threshold": 1,
                            "name": "95654506-8759-4c3f-a3a9-f39f11870dd8",
                            "metricNamespace": "Microsoft.DataFactory/factories",
                            "metricName": "ActivitySucceededRuns",
                            "dimensions": [
                                {
                                    "name": "ActivityType",
                                    "operator": "Include",
                                    "values": [
                                        "Wait"
                                    ]
                                },
                                {
                                    "name": "Name",
                                    "operator": "Include",
                                    "values": [
                                        "Alert_Schema_Has_Same_Column_But_Different_Structure"
                                    ]
                                },
                                {
                                    "name": "PipelineName",
                                    "operator": "Include",
                                    "values": [
                                        "Covid_Tracking",
                                        "Covid_Tracking_SinkSQL"
                                    ]
                                },
                                {
                                    "name": "FailureType",
                                    "operator": "Include",
                                    "values": [
                                        "none"
                                    ]
                                }
                            ],
                            "operator": "GreaterThanOrEqual",
                            "timeAggregation": "Average",
                            "criterionType": "StaticThresholdCriterion"
                        }
                    ],
                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                },
                "targetResourceType": "microsoft.datafactory/factories",
                "actions": [
                    {
                        "actionGroupId": "[resourceId('microsoft.insights/actionGroups', parameters('Action_Group_Name'))]",
                        "webHookProperties": {}
                    }
                ]
            }
        }
    ]
}
